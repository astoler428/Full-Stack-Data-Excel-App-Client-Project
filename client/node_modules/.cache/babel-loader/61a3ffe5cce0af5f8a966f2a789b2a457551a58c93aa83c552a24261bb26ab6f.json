{"ast":null,"code":"var _jsxFileName = \"/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Final/client/src/TagDataHeader.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { fetchRandomData, fetchRecentTag, fetchAllTags } from \"./apiCalls\";\nimport { useNavigate } from \"react-router-dom\";\n\n//Contains the filter by tag selection, button to fetch random datapoint, and textArea to display the random datapoint\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TagDataheader(_ref) {\n  _s();\n  let {\n    randomData,\n    setRandomData,\n    chosenTagFilter,\n    setChosenTagFilter,\n    updatedTagCount\n  } = _ref;\n  const [filterTags, setFilterTags] = useState([]); //list of existing tags (gotten from database)\n  const navigate = useNavigate();\n\n  //configures the header on load and every time an update has been made to the tags\n\n  useEffect(() => {\n    setHeader();\n\n    //API call to fetch all the existing tags to display in the drop down\n    //API call to get recent (last used) tag to default to that\n    //clear random data textarea\n    async function setHeader() {\n      const res = await fetchAllTags();\n      const tags = await res.json();\n      tags.unshift(\" \", \"RANDOM DATA\"); //always include these two tag options\n      setFilterTags(tags);\n      setRecentTag();\n      setRandomData(null);\n    }\n  }, [updatedTagCount]);\n\n  //fetches the last used tag stored in database\n  async function setRecentTag() {\n    const res = await fetchRecentTag();\n    const recentTag = await res.json();\n    setChosenTagFilter(recentTag.tag);\n  }\n  const displayFilterTags = filterTags.map(tag => /*#__PURE__*/_jsxDEV(\"option\", {\n    children: tag\n  }, Math.random(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this));\n\n  //onclick handler for the button\n  async function getRandomData() {\n    //API call to get random data based on filter\n\n    const res = await fetchRandomData(chosenTagFilter);\n\n    //if no datapoint found\n    if (res.status === 404) {\n      window.alert(\"No datapoint found with that filter\");\n      setRandomData(null);\n      return;\n    }\n\n    //set state to the data found and navigate to the nested route url\n\n    const data = await res.json();\n    setRandomData(data);\n    navigate(`${data.id}`);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"options-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Filter By Tag:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        name: \"existing-tags\",\n        className: \"select-tag\",\n        value: chosenTagFilter,\n        onChange: e => setChosenTagFilter(e.target.value),\n        children: displayFilterTags\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: getRandomData,\n        children: \"Get Random Data\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"data-container\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        readOnly: true,\n        className: \"data-textarea\",\n        value: randomData ? randomData.dataPoint : \"\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TagDataheader, \"Y37igAjkGKKaQLJcrkPtdRzlT4o=\", false, function () {\n  return [useNavigate];\n});\n_c = TagDataheader;\nvar _c;\n$RefreshReg$(_c, \"TagDataheader\");","map":{"version":3,"names":["React","useState","useEffect","fetchRandomData","fetchRecentTag","fetchAllTags","useNavigate","jsxDEV","_jsxDEV","Fragment","_Fragment","TagDataheader","_ref","_s","randomData","setRandomData","chosenTagFilter","setChosenTagFilter","updatedTagCount","filterTags","setFilterTags","navigate","setHeader","res","tags","json","unshift","setRecentTag","recentTag","tag","displayFilterTags","map","children","Math","random","fileName","_jsxFileName","lineNumber","columnNumber","getRandomData","status","window","alert","data","id","className","name","value","onChange","e","target","onClick","readOnly","dataPoint","_c","$RefreshReg$"],"sources":["/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Final/client/src/TagDataHeader.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { fetchRandomData, fetchRecentTag, fetchAllTags } from \"./apiCalls\";\nimport { useNavigate } from \"react-router-dom\";\n\n//Contains the filter by tag selection, button to fetch random datapoint, and textArea to display the random datapoint\n\nexport default function TagDataheader({\n  randomData,\n  setRandomData,\n  chosenTagFilter,\n  setChosenTagFilter,\n  updatedTagCount,\n}) {\n  const [filterTags, setFilterTags] = useState([]); //list of existing tags (gotten from database)\n  const navigate = useNavigate();\n\n  //configures the header on load and every time an update has been made to the tags\n\n  useEffect(() => {\n    setHeader();\n\n    //API call to fetch all the existing tags to display in the drop down\n    //API call to get recent (last used) tag to default to that\n    //clear random data textarea\n    async function setHeader() {\n      const res = await fetchAllTags();\n      const tags = await res.json();\n      tags.unshift(\" \", \"RANDOM DATA\"); //always include these two tag options\n      setFilterTags(tags);\n      setRecentTag();\n      setRandomData(null);\n    }\n  }, [updatedTagCount]);\n\n  //fetches the last used tag stored in database\n  async function setRecentTag() {\n    const res = await fetchRecentTag();\n    const recentTag = await res.json();\n    setChosenTagFilter(recentTag.tag);\n  }\n\n  const displayFilterTags = filterTags.map((tag) => (\n    <option key={Math.random()}>{tag}</option>\n  ));\n\n  //onclick handler for the button\n  async function getRandomData() {\n    //API call to get random data based on filter\n\n    const res = await fetchRandomData(chosenTagFilter);\n\n    //if no datapoint found\n    if (res.status === 404) {\n      window.alert(\"No datapoint found with that filter\");\n      setRandomData(null);\n      return;\n    }\n\n    //set state to the data found and navigate to the nested route url\n\n    const data = await res.json();\n    setRandomData(data);\n    navigate(`${data.id}`);\n  }\n\n  return (\n    <>\n      <div className=\"options-container\">\n        <label>Filter By Tag:</label>\n        <select\n          name=\"existing-tags\"\n          className=\"select-tag\"\n          value={chosenTagFilter}\n          onChange={(e) => setChosenTagFilter(e.target.value)}\n        >\n          {displayFilterTags}\n        </select>\n        <button onClick={getRandomData}>Get Random Data</button>\n      </div>\n      <div className=\"data-container\">\n        <textarea\n          readOnly={true}\n          className=\"data-textarea\"\n          value={randomData ? randomData.dataPoint : \"\"}\n        ></textarea>\n      </div>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}