{"ast":null,"code":"var _jsxFileName = \"/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Mern/client/src/AddTags.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddTags() {\n  _s();\n  const [tags, setTags] = useState([\"\"]);\n  //could get randomData from params id, but since I already have it, may as well pass it down and have only one copy of the state\n  const [randomData, setRandomData] = useOutletContext();\n  async function updateTags(tags) {\n    const tagData = tags.filter(tag => tag !== \"\");\n    await putTags(randomData, tagData);\n    await putRecentTag(chosenTagFilter);\n    setRandomData(null);\n    setUpdatedCount(prevUpdatedCount => prevUpdatedCount + 1);\n    // navigate back to tags which will rerender\n  }\n\n  function handleInputChange(e, index) {\n    setTags(prevTags => prevTags.map((tag, idx) => idx === index ? e.target.value : tag));\n  }\n  function createNewTag() {\n    setTags(prevTags => [...prevTags, \"\"]);\n  }\n  const displayExistingTagsOnData = randomData ? randomData.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"existing-tag\",\n    children: index === randomData.tags.length - 1 ? `${tag} ` : `${tag}, `\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this)) : \"\";\n  const inputTags = tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n    value: tag,\n    onChange: e => handleInputChange(e, index)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 40,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"existing-tags-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Existing Tags:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: displayExistingTagsOnData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-tags-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewTag,\n        children: \"Add tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this), inputTags, /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"add-tags-container\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"update-tags-btn\",\n      onClick: () => updateTags(tags),\n      children: \"Update Tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n\n//lift random data state up as well as handle submit\n_s(AddTags, \"mWdJ66uKPOrXcCGhVuyaJf0nUpI=\", false, function () {\n  return [useOutletContext];\n});\n_c = AddTags;\nvar _c;\n$RefreshReg$(_c, \"AddTags\");","map":{"version":3,"names":["React","useState","useOutletContext","putTags","putRecentTag","jsxDEV","_jsxDEV","Fragment","_Fragment","AddTags","_s","tags","setTags","randomData","setRandomData","updateTags","tagData","filter","tag","chosenTagFilter","setUpdatedCount","prevUpdatedCount","handleInputChange","e","index","prevTags","map","idx","target","value","createNewTag","displayExistingTagsOnData","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","inputTags","onChange","onClick","_c","$RefreshReg$"],"sources":["/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Mern/client/src/AddTags.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useOutletContext } from \"react-router-dom\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\n\nexport default function AddTags() {\n  const [tags, setTags] = useState([\"\"]);\n  //could get randomData from params id, but since I already have it, may as well pass it down and have only one copy of the state\n  const [randomData, setRandomData] = useOutletContext();\n\n  async function updateTags(tags) {\n    const tagData = tags.filter((tag) => tag !== \"\");\n\n    await putTags(randomData, tagData);\n    await putRecentTag(chosenTagFilter);\n\n    setRandomData(null);\n    setUpdatedCount((prevUpdatedCount) => prevUpdatedCount + 1);\n    // navigate back to tags which will rerender\n  }\n\n  function handleInputChange(e, index) {\n    setTags((prevTags) =>\n      prevTags.map((tag, idx) => (idx === index ? e.target.value : tag))\n    );\n  }\n\n  function createNewTag() {\n    setTags((prevTags) => [...prevTags, \"\"]);\n  }\n\n  const displayExistingTagsOnData = randomData\n    ? randomData.tags.map((tag, index) => (\n        <label key={index} className=\"existing-tag\">\n          {index === randomData.tags.length - 1 ? `${tag} ` : `${tag}, `}\n        </label>\n      ))\n    : \"\";\n\n  const inputTags = tags.map((tag, index) => (\n    <input\n      key={index}\n      value={tag}\n      onChange={(e) => handleInputChange(e, index)}\n    />\n  ));\n\n  return (\n    <>\n      <div className=\"existing-tags-container\">\n        <label>Existing Tags:</label>\n        <ul>{displayExistingTagsOnData}</ul>\n      </div>\n      <div className=\"new-tags-container\">\n        <button onClick={createNewTag}>Add tag</button>\n        {inputTags}\n        <div className=\"add-tags-container\"></div>\n      </div>\n      <button className=\"update-tags-btn\" onClick={() => updateTags(tags)}>\n        Update Tags\n      </button>\n    </>\n  );\n}\n\n//lift random data state up as well as handle submit\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}