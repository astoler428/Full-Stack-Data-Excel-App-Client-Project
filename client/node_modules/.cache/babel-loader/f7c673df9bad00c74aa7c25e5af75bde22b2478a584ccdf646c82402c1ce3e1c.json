{"ast":null,"code":"var _jsxFileName = \"/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Final/client/src/AddTags.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\n\n//Component that displays when a randomdatapoint is being displayed\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function AddTags() {\n  _s();\n  //state for the tags that will be added to the datapoint\n  //these get mapped into input components\n  const [tags, setTags] = useState([\"\"]);\n\n  //could get randomData from params id, but since I already have it, may as well pass it down and have only one copy of the state\n  const [randomData, setRandomData, chosenTagFilter, setUpdatedTagCount] = useOutletContext();\n  const navigate = useNavigate();\n\n  //in case the user manually goes to a url of an id that doesn't exist\n  if (!randomData) navigate(\"..\");\n\n  //formats all existing tags on the datapoint to display\n  //if no datapoint, then no tags\n  //each tag has a comma after except the last one\n\n  const displayExistingTagsOnData = randomData ? randomData.tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"label\", {\n    className: \"existing-tag\",\n    children: index === randomData.tags.length - 1 ? `${tag} ` : `${tag}, `\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 9\n  }, this)) : \"\";\n  const inputTags = tags.map((tag, index) => /*#__PURE__*/_jsxDEV(\"input\", {\n    value: tag,\n    onChange: e => handleInputChange(e, index)\n  }, index, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this));\n\n  //event listener for input fields to add tags to make them controlled components\n  function handleInputChange(e, index) {\n    setTags(prevTags => prevTags.map((tag, idx) => idx === index ? e.target.value : tag));\n  }\n\n  //event listener for button to add a tag\n  function createNewTag() {\n    setTags(prevTags => [...prevTags, \"\"]);\n  }\n  async function updateTags(tags) {\n    const tagData = tags.filter(tag => tag !== \"\");\n    await putTags(randomData, tagData);\n    await putRecentTag(chosenTagFilter);\n    setRandomData(null);\n    setUpdatedTagCount(prevUpdatedTagCount => prevUpdatedTagCount + 1);\n    navigate(\"..\");\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"existing-tags-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        children: \"Existing Tags:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: displayExistingTagsOnData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"new-tags-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createNewTag,\n        children: \"Add tag\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), inputTags]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"update-tags-btn\",\n      onClick: () => updateTags(tags),\n      children: \"Update Tags\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(AddTags, \"wZy1FPEDa3ot4pZ6/AU0DcMpqlg=\", false, function () {\n  return [useOutletContext, useNavigate];\n});\n_c = AddTags;\nvar _c;\n$RefreshReg$(_c, \"AddTags\");","map":{"version":3,"names":["React","useState","useOutletContext","useNavigate","putTags","putRecentTag","jsxDEV","_jsxDEV","Fragment","_Fragment","AddTags","_s","tags","setTags","randomData","setRandomData","chosenTagFilter","setUpdatedTagCount","navigate","displayExistingTagsOnData","map","tag","index","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","inputTags","value","onChange","e","handleInputChange","prevTags","idx","target","createNewTag","updateTags","tagData","filter","prevUpdatedTagCount","onClick","_c","$RefreshReg$"],"sources":["/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Final/client/src/AddTags.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport { useOutletContext, useNavigate } from \"react-router-dom\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\n\n//Component that displays when a randomdatapoint is being displayed\n\nexport default function AddTags() {\n  //state for the tags that will be added to the datapoint\n  //these get mapped into input components\n  const [tags, setTags] = useState([\"\"]);\n\n  //could get randomData from params id, but since I already have it, may as well pass it down and have only one copy of the state\n  const [randomData, setRandomData, chosenTagFilter, setUpdatedTagCount] =\n    useOutletContext();\n  const navigate = useNavigate();\n\n  //in case the user manually goes to a url of an id that doesn't exist\n  if (!randomData) navigate(\"..\");\n\n  //formats all existing tags on the datapoint to display\n  //if no datapoint, then no tags\n  //each tag has a comma after except the last one\n\n  const displayExistingTagsOnData = randomData\n    ? randomData.tags.map((tag, index) => (\n        <label key={index} className=\"existing-tag\">\n          {index === randomData.tags.length - 1 ? `${tag} ` : `${tag}, `}\n        </label>\n      ))\n    : \"\";\n\n  const inputTags = tags.map((tag, index) => (\n    <input\n      key={index}\n      value={tag}\n      onChange={(e) => handleInputChange(e, index)}\n    />\n  ));\n\n  //event listener for input fields to add tags to make them controlled components\n  function handleInputChange(e, index) {\n    setTags((prevTags) =>\n      prevTags.map((tag, idx) => (idx === index ? e.target.value : tag))\n    );\n  }\n\n  //event listener for button to add a tag\n  function createNewTag() {\n    setTags((prevTags) => [...prevTags, \"\"]);\n  }\n\n  async function updateTags(tags) {\n    const tagData = tags.filter((tag) => tag !== \"\");\n\n    await putTags(randomData, tagData);\n    await putRecentTag(chosenTagFilter);\n\n    setRandomData(null);\n    setUpdatedTagCount((prevUpdatedTagCount) => prevUpdatedTagCount + 1);\n    navigate(\"..\");\n  }\n\n  return (\n    <>\n      <div className=\"existing-tags-container\">\n        <label>Existing Tags:</label>\n        <ul>{displayExistingTagsOnData}</ul>\n      </div>\n      <div className=\"new-tags-container\">\n        <button onClick={createNewTag}>Add tag</button>\n        {inputTags}\n      </div>\n      <button className=\"update-tags-btn\" onClick={() => updateTags(tags)}>\n        Update Tags\n      </button>\n    </>\n  );\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}