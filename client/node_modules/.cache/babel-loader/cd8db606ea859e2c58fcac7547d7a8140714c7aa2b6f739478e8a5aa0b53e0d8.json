{"ast":null,"code":"var _jsxFileName = \"/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Mern/client/src/TagPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport AddTags from \"./AddTags\";\nimport RandomData from \"./RandomData\";\nimport useBackgroundColor from \"./useBackgroundColor\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TagPage() {\n  _s();\n  useBackgroundColor(\"lightgreen\");\n  const [randomData, setRandomData] = useState(null); //will be an object with dataPoint, id and tags[]\n  const [chosenTagFilter, setChosenTagFilter] = useState();\n  const [updatedCount, setUpdatedCount] = useState(0); //using this to track when an update happens to trigger useEffect\n\n  async function updateTags(tags) {\n    const tagData = tags.filter(tag => tag !== \"\");\n    putTags(randomData, tagData);\n    putRecentTag(chosenTagFilter);\n    setRandomData(null);\n    // setUpdatedCount((prevUpdatedCount) => prevUpdatedCount + 1);\n  }\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(RandomData, {\n      randomData: randomData,\n      setRandomData: setRandomData,\n      chosenTagFilter: chosenTagFilter,\n      setChosenTagFilter: setChosenTagFilter,\n      updatedCount: updatedCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), randomData && /*#__PURE__*/_jsxDEV(AddTags, {\n      updateTags: updateTags,\n      randomData: randomData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n}\n//only show the addTags page if Data is available from the randomData call\n//default addTags page to have an input\n//may need to look back at css from js version since I create classNames in the javacript that i may have deleted\n\n//vague ideas: params like id for the id of data received, set that in url\n//that will display a nested route that will show the add tags feature?\n_s(TagPage, \"4cvgt2xdFOsHLaDvaaK02rZQ534=\", false, function () {\n  return [useBackgroundColor];\n});\n_c = TagPage;\nvar _c;\n$RefreshReg$(_c, \"TagPage\");","map":{"version":3,"names":["React","useState","AddTags","RandomData","useBackgroundColor","putTags","putRecentTag","jsxDEV","_jsxDEV","Fragment","_Fragment","TagPage","_s","randomData","setRandomData","chosenTagFilter","setChosenTagFilter","updatedCount","setUpdatedCount","updateTags","tags","tagData","filter","tag","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/aristoler/Desktop/Coding/Adam's App/Adam Excel App Mern/client/src/TagPage.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport AddTags from \"./AddTags\";\nimport RandomData from \"./RandomData\";\nimport useBackgroundColor from \"./useBackgroundColor\";\nimport { putTags, putRecentTag } from \"./apiCalls\";\n\nexport default function TagPage() {\n  useBackgroundColor(\"lightgreen\");\n  const [randomData, setRandomData] = useState(null); //will be an object with dataPoint, id and tags[]\n  const [chosenTagFilter, setChosenTagFilter] = useState();\n  const [updatedCount, setUpdatedCount] = useState(0); //using this to track when an update happens to trigger useEffect\n\n  async function updateTags(tags) {\n    const tagData = tags.filter((tag) => tag !== \"\");\n\n    putTags(randomData, tagData);\n    putRecentTag(chosenTagFilter);\n\n    setRandomData(null);\n    // setUpdatedCount((prevUpdatedCount) => prevUpdatedCount + 1);\n  }\n\n  return (\n    <>\n      <RandomData\n        randomData={randomData}\n        setRandomData={setRandomData}\n        chosenTagFilter={chosenTagFilter}\n        setChosenTagFilter={setChosenTagFilter}\n        updatedCount={updatedCount}\n      />\n\n      {randomData && (\n        <AddTags updateTags={updateTags} randomData={randomData} />\n      )}\n    </>\n  );\n}\n//only show the addTags page if Data is available from the randomData call\n//default addTags page to have an input\n//may need to look back at css from js version since I create classNames in the javacript that i may have deleted\n\n//vague ideas: params like id for the id of data received, set that in url\n//that will display a nested route that will show the add tags feature?\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,UAAU,MAAM,cAAc;AACrC,OAAOC,kBAAkB,MAAM,sBAAsB;AACrD,SAASC,OAAO,EAAEC,YAAY,QAAQ,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAEnD,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChCR,kBAAkB,CAAC,YAAY,CAAC;EAChC,MAAM,CAACS,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;EACpD,MAAM,CAACc,eAAe,EAAEC,kBAAkB,CAAC,GAAGf,QAAQ,CAAC,CAAC;EACxD,MAAM,CAACgB,YAAY,EAAEC,eAAe,CAAC,GAAGjB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;;EAErD,eAAekB,UAAUA,CAACC,IAAI,EAAE;IAC9B,MAAMC,OAAO,GAAGD,IAAI,CAACE,MAAM,CAAEC,GAAG,IAAKA,GAAG,KAAK,EAAE,CAAC;IAEhDlB,OAAO,CAACQ,UAAU,EAAEQ,OAAO,CAAC;IAC5Bf,YAAY,CAACS,eAAe,CAAC;IAE7BD,aAAa,CAAC,IAAI,CAAC;IACnB;EACF;;EAEA,oBACEN,OAAA,CAAAE,SAAA;IAAAc,QAAA,gBACEhB,OAAA,CAACL,UAAU;MACTU,UAAU,EAAEA,UAAW;MACvBC,aAAa,EAAEA,aAAc;MAC7BC,eAAe,EAAEA,eAAgB;MACjCC,kBAAkB,EAAEA,kBAAmB;MACvCC,YAAY,EAAEA;IAAa;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EAEDf,UAAU,iBACTL,OAAA,CAACN,OAAO;MAACiB,UAAU,EAAEA,UAAW;MAACN,UAAU,EAAEA;IAAW;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAC3D;EAAA,eACD,CAAC;AAEP;AACA;AACA;AACA;;AAEA;AACA;AAAAhB,EAAA,CArCwBD,OAAO;EAAA,QAC7BP,kBAAkB;AAAA;AAAAyB,EAAA,GADIlB,OAAO;AAAA,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}